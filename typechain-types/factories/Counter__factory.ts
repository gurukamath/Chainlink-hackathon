/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "updateInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104f53803806104f583398181016040528101906100329190610063565b80608081815250504260018190555060008081905550506100ad565b60008151905061005d81610096565b92915050565b60006020828403121561007557600080fd5b60006100838482850161004e565b91505092915050565b6000819050919050565b61009f8161008c565b81146100aa57600080fd5b50565b6080516104266100cf60003960008181610135015261016e01526104266000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f3b3b271461005c5780634585e33b1461007a57806361bc221a146100965780636e04ff0d146100b4578063947a36fb146100e5575b600080fd5b610064610103565b60405161007191906102a6565b60405180910390f35b610094600480360381019061008f91906101da565b610109565b005b61009e610129565b6040516100ab91906102a6565b60405180910390f35b6100ce60048036038101906100c991906101da565b61012f565b6040516100dc929190610276565b60405180910390f35b6100ed61016c565b6040516100fa91906102a6565b60405180910390f35b60015481565b42600181905550600160005461011f91906102dd565b6000819055505050565b60005481565b600060607f0000000000000000000000000000000000000000000000000000000000000000600154426101629190610333565b1191509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008083601f8401126101a257600080fd5b8235905067ffffffffffffffff8111156101bb57600080fd5b6020830191508360018202830111156101d357600080fd5b9250929050565b600080602083850312156101ed57600080fd5b600083013567ffffffffffffffff81111561020757600080fd5b61021385828601610190565b92509250509250929050565b61022881610367565b82525050565b6000610239826102c1565b61024381856102cc565b935061025381856020860161037d565b61025c816103df565b840191505092915050565b61027081610373565b82525050565b600060408201905061028b600083018561021f565b818103602083015261029d818461022e565b90509392505050565b60006020820190506102bb6000830184610267565b92915050565b600081519050919050565b600082825260208201905092915050565b60006102e882610373565b91506102f383610373565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610328576103276103b0565b5b828201905092915050565b600061033e82610373565b915061034983610373565b92508282101561035c5761035b6103b0565b5b828203905092915050565b60008115159050919050565b6000819050919050565b60005b8381101561039b578082015181840152602081019050610380565b838111156103aa576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220fe5d4bd07c30daeb92f838d0830e04af57caefdd45bdf8559a262d846260630164736f6c63430008040033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    updateInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(updateInterval, overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    updateInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(updateInterval, overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
