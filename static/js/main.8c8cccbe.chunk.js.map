{"version":3,"sources":["modules/web3_utils.ts","styles/color_palette.ts","components/Navbar.tsx","modules/ipfs_utils.ts","modules/nfticket_utils.ts","components/TicketDisplay.tsx","components/NFTicketSpinner.tsx","components/MyTickets.tsx","components/MyFunds.tsx","components/Home.tsx","components/TicketCanvas.tsx","components/EventDisplay.tsx","components/Events.tsx","components/BuyTickets.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["connectWallet","web3UpdateFunction","accountUpdateFunction","chainUpdateFunction","a","accounts","detectEthereumProvider","catch","e","window","alert","message","console","warn","provider","ethereum","web3","Web3","log","request","method","currentProvider","on","account","eth","getChainId","chainId","chain","ColorPalette","NFTicketsNavbar","props","useState","connectToMetamask","maskUpdateFunctions","Navbar","bg","Container","Brand","className","style","color","href","Toggle","Collapse","Nav","to","web3States","marginRight","Button","disabled","backgroundColor","borderColor","onClick","IPFS_NODE_URL","IPFS_BASE_URL","BASE_IMAGE_URL","BASE_EXPIRED_IMAGE_URL","ipfsClient","create","url","uploadToIPFS","file","add","added","path","mintNFTicket","nftContract","data","metadata","expirationDateTimestamp","badge","getTime","badge_uri","metadataDoc","JSON","stringify","metadata_url","methods","createEventTickets","unitPrice","maxSupply","percentageOnResale","send","from","getOwnedTickets","call","ownedTickets","getAllEvents","events","balanceOf","ticketId","balance","getTicket","nfTickets","ticket","buyTickets","amount","amountToPay","buyFromOwner","value","getMaticPrice","getRevenue","withdrawFunds","withdrawProceeds","TicketDisplay","setBalance","formatedDate","setFormatedDate","useEffect","getExipirationDateFromTimestamp","timestamp","yourDate","Date","toString","getBalance","contract","_balance","then","owner","infoStyle","fontSize","border","margin","borderRadius","width","padding","Row","Col","eventName","expired","src","height","marginLeft","marginTop","zIndex","tokenSalePrice","toUpperCase","NFTicketSpinner","SpinnerDotted","size","spinnerSize","MyTickets","myTickets","setMyTickets","loading","setLoading","loadTickets","processIpfsString","str","str2","split","finalStirng","scTickets","processedScTickets","length","key","ticketObj","Object","push","i","urlPieces","metadataURI","uriPt1","finalUrl","axios","post","ticketRawMetadata","ticketMetadata","parse","Data","assign","marginBottom","map","idx","MyFunds","funds","setFunds","maticPrice","setMaticPrice","withdrawSuccessful","setWithdrawSuccessful","withdrawError","setWithdrawError","withdrawing","setWithdrawing","_getRevenue","r","Math","round","setTimeout","Home","network","TicketCanvas","uploadedBadgeUrl","setUploadedBadgeUrl","currentBadgeFile","setCurrentBadgeFile","badger","setBadger","canvasRef","useRef","imageRef","badgeRef","eventMetadata","setEventMetadata","eventData","setEventData","setExpirationDateTimestamp","minting","setMinting","mintingError","setMintingError","mintingSuccessful","setMintingSuccessful","drawTicket","canvas","image","ctx","getContext","drawImage","printMetadata","startX","startY","font","fillText","onImageChange","event","target","files","local_url","URL","createObjectURL","current","updateImage","fluid","ref","hidden","type","name","onChange","Form","Group","controlId","Label","Control","placeholder","selected","date","EventDisplay","availableForSale","setAvailableForSale","navigate","useNavigate","getAvailableForSale","_availableForSable","Events","setEvents","loadEvents","BuyTickets","useParams","ticketCounter","setTicketCounter","buying","setBuying","buyingError","setBuyingError","buyingSuccess","setBuyingSuccess","setTicket","_maticRealPrice","loadTicket","scTicket","valueInWei","ceil","App","setWeb3","setNetwork","setAccount","setContract","isNetworkInvalid","setIsNetworkInvalid","abi","NFTicketContract","Contract","MUMBAI_CONTRACT_ADDRESS","element","uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c8cccbe.chunk.js","sourcesContent":["import * as NFTicketContract from '../artifacts/contracts/NFTickets.json';\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\ndeclare const window :any;\n\nexport const MUMBAI_CONTRACT_ADDRESS = \"0xaa7d4CF0bA52d83A43FD7C4002b22d06dB6bd226\";\n\n\nconst MUMBAI_CONTRACT_ADDRESS_REMIX = \"0x43f96e3d0B205D971C83F55481739F7807385fFE\"\n\nexport const initContract = (web3: any, contractSetter: Function, contractDefinition: any) => {\n    const abi = contractDefinition.default.abi;\n    const contractAddress = MUMBAI_CONTRACT_ADDRESS\n    const contract: any = new web3.eth.Contract(abi, contractAddress)\n    contractSetter(contract);\n}\n\n\n\nexport const loadBlockchainData = async () => {\n    let web3: any;\n    let accounts: string[];\n    web3 = new Web3(\"http://localhost:8545\")\n    accounts = await web3.eth.getAccounts();\n    const network = await web3.eth.net.getNetworkType()\n    return {\"web3\":web3,\"network\":network,\"accounts\":accounts}\n}\n\nexport const connectWallet = async (web3UpdateFunction:any, accountUpdateFunction:any, chainUpdateFunction:any) => {\n    let provider : any;\n    let web3: any;\n    let accounts: string[] = [];\n    let chainId: any;\n\n\n    // Initiate the Web3 Provider\n    provider = await detectEthereumProvider().catch((e:any) => {\n        window.alert(e.message);\n        console.warn(\"Unable to find waller\");\n    })\n\n    // Set Web3\n    if (provider === window.ethereum) {\n        web3 = new Web3(provider);\n        console.log(\"Metamask is installed! \");\n    } else {\n        web3 = new Web3(\"http://localhost:8545\"); // Local Ganache\n    }\n    web3UpdateFunction(web3);\n\n\n\n\n    // Set Account and change event listener\n    accounts = await provider.request({method:'eth_requestAccounts'})\n    accountUpdateFunction(accounts[0]);\n    web3.currentProvider.on('accountsChanged', (account:any)=> {\n        accountUpdateFunction(account[0]);\n    })\n        \n    // Set Network and change event listener\n    chainId = await web3.eth.getChainId();\n    chainUpdateFunction(chainId);\n    web3.currentProvider.on(\"chainChanged\", async (chain:any) => {\n        chainUpdateFunction(chain);\n    })\n}\n\n\n\nexport const processSmartContractResponseTuple = (tuple: any[]) => {\n    let key : any;\n    let ticketObj: any = new Object();\n    for (key in tuple) {\n        ticketObj[key.toString()] = tuple[key];\n    }\n    return ticketObj;\n}\n\n\n\nexport default NFTicketContract;","\n// a46385\n\nexport const ColorPalette = {\n    mainColor: \"#eccccf\",\n    secondaryColor: \"#fe47b3\",\n    green: \"#80da65\",\n    blue: \"#01a7ec\",\n    backgroundColor: \"#fa9c76\",\n    success: \"#77af63\",\n    warning: \"#ef0949\"\n\n}","import {Button, Col, Container, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport React, {useEffect, useState} from \"react\";\n\nimport NFTContract, {loadBlockchainData, connectWallet, initContract} from '../modules/web3_utils';\nimport {ColorPalette} from \"../styles/color_palette\";\n\n\nexport default function NFTicketsNavbar(props: any) {\n\n\n    const [loadingBlockchainData, setLoadingBlockchainData] = useState<boolean>(false);\n\n\n    const connectToMetamask = async()=> {\n        await connectWallet(props.maskUpdateFunctions[0],props.maskUpdateFunctions[1],props.maskUpdateFunctions[2]);\n\n    }\n\n    return (\n        <Navbar  bg=\"dark\">\n            <Container>\n                <Navbar.Brand className=\"justify-content-start\" style={{color:\"white\"}} href=\"#home\">NFTickets</Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse className=\"justify-content-end\">\n                             <Nav className=\"me-auto\">\n                                <Link  to=\"/\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>Home</Link>\n                                 {props.web3States[1]!=null && <Link to=\"events\" className=\"mx-3 mt-6\" style={{color: \"white\"}}>Events</Link>}\n                                 {props.web3States[1]!=null && <Link to=\"my-tickets\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>My Tickets</Link>}\n                                 {props.web3States[1]!=null && <Link to=\"mint-tickets\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>Mint NFTickets</Link>}\n                                 {/*{props.web3States[1]!=null && <Link to=\"my-funds\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>My Funds</Link>}*/}\n\n\n                              </Nav>\n                </Navbar.Collapse>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <div style={{marginRight:\"50px\", color: \"white\"}}>\n                        <div>\n                            <span >{props.web3States[0]!=null?<span >Connected</span>:<span>Not Connected</span>}</span>\n                        </div>\n                        <div>\n                            {props.web3States[1] && <span>Account: {props.web3States[1]}</span>}\n                        </div>\n                    </div>\n                    <Button disabled={props.web3States[1]} style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={connectToMetamask}>Connect your wallet</Button>\n\n\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n\n)\n}\n\n\n\n// <Navbar  bg=\"light\" expand=\"lg\">\n//\n//     <Row>\n//         <Col xs={12} md={8}>\n//             <Navbar.Brand>NFTickets</Navbar.Brand>\n//\n//\n//             {/*<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />*/}\n//             {/*<Navbar.Collapse id=\"basic-navbar-nav\">*/}\n//             {/*<Nav className=\"me-auto\">*/}\n//             <Link to=\"/\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Home</Link>\n//             <Link to=\"events\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Events</Link>\n//             <Link to=\"my-tickets\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>My Tickets</Link>\n//             <Link to=\"mint-tickets\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Mint NFTickets</Link>\n//\n//             {/*</Nav>*/}\n//         </Col>\n//\n//\n//         <Navbar.Collapse className=\"justify-content-end\">\n//             <Button onClick={connectToMetamask}>Connect your wallet</Button>\n//             <div>\n//                 <span>Connection state : {props.web3States[0]!=null?<span>Connected</span>:<span>Not Connected</span>}</span>\n//             </div>\n//         </Navbar.Collapse>\n//\n//         {/*</Navbar.Collapse>*/}\n//\n//     </Row>\n//\n// </Navbar>","import ipfsHttpClient, { create } from 'ipfs-http-client';\n\nexport const IPFS_NODE_URL = 'https://ipfs.infura.io:5001'\nexport const IPFS_BASE_URL = \"https://ipfs.io/ipfs\"\n\n// QmYEowFCRGFsuzhhwMdijZ1sqUfZd28gcJ7bx3Vydgso9x Old image\n\nexport const BASE_IMAGE_HASH = \"QmTyPBRhmbaoyzP8HaqK1JyqKNhkaTZXJpTsfe58bot6wb\";\n\nexport const EXPIRED_IMAGE_HASH = \"QmYZe4QX6UEB26GaN4vR3UHXnaHtwgW4d1a77zvrGae6te\"\n\nexport const BASE_IMAGE_URL = `${IPFS_BASE_URL}/${BASE_IMAGE_HASH}`\n\nexport const BASE_EXPIRED_IMAGE_URL = `${IPFS_BASE_URL}/${EXPIRED_IMAGE_HASH}`\n\n\nconst ipfsClient = create({url: IPFS_NODE_URL})\n\n\nexport const uploadToIPFS = async (file:any) => {\n    const added = await ipfsClient.add(file)\n    console.log(\"File uploaded to ipfs\");\n    const url = `${IPFS_NODE_URL}/${added.path}`\n    console.log(\"Image url is: \", url);\n    return added.path;\n}\n\n\nexport const downloadFromIPFS = async (url: string) => {\n\n\n}\n\n\nexport default ipfsClient;","import {uploadToIPFS} from \"./ipfs_utils\";\n\n\nexport const mintNFTicket = async (nftContract: any, account: string, data: any, metadata: any, expirationDateTimestamp: Date, badge: any) => {\n    // Store info on ipfs\n    console.log(\"Received metadata: \", metadata);\n    console.log(\"Received image: \", badge);\n    console.log(\"Received date: \", expirationDateTimestamp.getTime());\n    const badge_uri = await uploadToIPFS(badge);\n    console.log(\"badge_uri: \", badge_uri);\n    metadata.badge_uri = badge_uri;\n    const metadataDoc = JSON.stringify(metadata);\n    const metadata_url = await uploadToIPFS(metadataDoc);\n    console.log(\"Metadata url: \", metadata_url);\n    console.log(\"Making request with account: \", account);\n    return await nftContract.methods.createEventTickets(data.unitPrice,data.maxSupply,data.percentageOnResale, expirationDateTimestamp.getTime(),metadata_url).send({from: account})\n\n}\n\n\nexport const subscribeTicketsUpdated = (nftContract: any) => {\n    nftContract.events.TicketsUpdated(null, (data: any)=> {\n        console.log(\"Tickets updated\");\n        console.log(\"Data is: \", data);\n    });\n}\n\n\nexport const getInterval = async (nftContract: any) => {\n    const interval = await nftContract.methods.interval.call().call();\n    console.log(\"Interval is: \", interval);\n}\n\nexport const getkeeperVerificationCounter = async (nftContract: any) => {\n    const counter = await nftContract.methods.keeperVerificationCounter.call().call();\n    console.log(\"Counter value is: \", counter)\n}\n\nexport const getUpdatesCounter = async (nftContract: any) => {\n    const counter = await nftContract.methods.updatesCounter.call().call();\n    console.log(\"Counter value is: \", counter)\n}\n\n\nexport const getOwnedTickets = async (nftContract: any, account: string) => {\n    const ownedTickets = await nftContract.methods.getOwnedTickets(account).call();\n    return ownedTickets;\n}\n\nexport const getAllEvents = async (nftContract: any, account: string) => {\n    const events = await nftContract.methods.getAllEvents().call();\n    return events;\n}\n\n\nexport const numTicketsOwned = (nftContract: any, index: number, account: string) => {\n    nftContract.methods.numTicketsOwned(index).send({from: account})\n        .then((response: any)=> {\n            console.log(\"Number of tickets: \", response);\n        })\n}\n\n\nexport const balanceOf = async (nftContract: any, account: any, ticketId: any) => {\n    const balance = await nftContract.methods.balanceOf(account, ticketId).call();\n    return balance;\n}\n\nexport const getTicket = async (nftContract: any, ticketId: any) => {\n    const ticket = await nftContract.methods.nfTickets(ticketId).call();\n    return ticket;\n}\n\nexport const buyTickets = async (nftContract: any, ticketId: any, amount: number, account: any, amountToPay: number) => {\n    return await nftContract.methods.buyFromOwner(ticketId, amount).send({from: account, value: amountToPay});\n}\n\nexport const getMaticPrice = async (nftContract: any) => {\n    return await nftContract.methods.getMaticPrice().call();\n}\n\nexport const getRevenue = async (nftContract: any, account: any) => {\n    return await nftContract.methods.getRevenue(account).call();\n}\n\nexport const withdrawFunds = async (nftContract: any, account: any) => {\n    return await nftContract.methods.withdrawProceeds().send({from:account});\n\n}","import React, {useEffect, useState} from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport {BASE_EXPIRED_IMAGE_URL, BASE_IMAGE_URL, IPFS_BASE_URL} from \"../modules/ipfs_utils\";\nimport {balanceOf} from \"../modules/nfticket_utils\";\nimport {ColorPalette} from \"../styles/color_palette\";\n\n\n\nexport default function TicketDisplay(props: any) {\n\n    const [balance, setBalance] = useState<any>(0);\n    const [formatedDate, setFormatedDate] = useState<any>(null);\n\n    useEffect(()=> {\n        getExipirationDateFromTimestamp(props.ticket.expirationDateTimestamp);\n\n    },[])\n\n    const getExipirationDateFromTimestamp = (timestamp: number) => {\n        let yourDate = new Date(timestamp);\n        console.log(\"Formatted date is: \", );\n        setFormatedDate(yourDate.toString());\n    }\n\n    const getBalance = async () => {\n        const _balance = await balanceOf(props.contract, props.account, props.ticket.ticketId);\n        setBalance(_balance)\n\n    }\n\n    useEffect(()=> {\n        const _balance = getBalance().then(()=>{})\n        console.log(\"Balance is: \", balance);\n        console.log(\"Ticket owner: \", props.ticket.owner);\n        console.log(\"Account: \", props.account);\n        console.log(\"Own? \", props.account == props.ticket.owner);\n    },[])\n\n    const infoStyle = {\n        fontSize:\"1.2em\",\n\n    }\n\n    // getBalance().then((b)=>console.log(\"Received balance: \", b));\n\n    return (<div className=\"mt-2\" style={{border: '2px solid rgba(0, 0, 0, 0.5)', margin:\"20px\",\n                    borderRadius:'10px', backgroundColor: ColorPalette.mainColor, width:\"80%\"}}>\n        <div style={{padding:\"10px\"}}>\n            <Row>\n                <Col>\n                    <h2>{props.ticket.metadata.eventName}</h2>\n                    {props.ticket.expired?<img  src={BASE_EXPIRED_IMAGE_URL} width=\"400\" height=\"300\"/>:<img  src={BASE_IMAGE_URL} width=\"400\" height=\"300\"/>}\n                    <img  style={{marginLeft:\"-370px\", marginTop:\"-170px\",zIndex:-1}} src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"80\" height=\"80\"/>\n                </Col>\n                <Col>\n\n                    <p style={infoStyle}>Ticket Id: {props.ticket.ticketId}</p>\n                    <p style={infoStyle}>Maximum supply: {props.ticket.maxSupply}</p>\n                    <p style={infoStyle}>Price: {props.ticket.tokenSalePrice} $</p>\n                    <p style={infoStyle}>Expiration date: {formatedDate}</p>\n                    <p style={infoStyle}>Balance: {balance}</p>\n                    <p><span>State: </span>{props.ticket.expired?<span>Expired</span>:<span>Valid</span>}</p>\n                    {props.ticket.owner.toUpperCase()==props.account.toUpperCase()?<p>Minted by me!</p>:<p>Usable</p>}\n\n                </Col>\n\n            </Row>\n        </div>\n    </div>)\n\n}","import {SpinnerDotted} from \"spinners-react\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport React from \"react\";\n\n\nconst NFTicketSpinner = (props:any) => {\n\n    return(\n        <div className=\"align-content-center\" style={{width:\"100%\"}}>\n            <SpinnerDotted size={props.spinnerSize?props.spinnerSize:\"60\"} color={ColorPalette.secondaryColor}/>\n            <span style={{color:ColorPalette.secondaryColor,  marginLeft:\"20px\"}}>{props.message}</span>\n        </div>\n    )\n\n\n}\n\nexport default NFTicketSpinner;","import React, {useEffect, useState} from \"react\";\nimport {getOwnedTickets} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst MyTickets = (props: any) => {\n\n        const [myTickets, setMyTickets] = useState<any>([]);\n        const [loading, setLoading] = useState<boolean>(false);\n\n\n\n    useEffect(()=> {\n        setLoading(true);\n\n            loadTickets()\n                .then((data)=> {\n                    setLoading(false);\n                    console.log(\"Got tickets: \", data);\n                })\n        },[])\n\n\n    const processIpfsString = (str: string) => {\n            const str1 = str.split(\"{\")[1];\n            const str2 = str1.split(\"}\")[0]\n            const finalStirng = \"{\" + str2 + \"}\";\n            console.log(\"Final string is: \", str2);\n            return finalStirng;\n    }\n\n\n    const loadTickets = async() => {\n        console.log(\"Loading Tickets...\");\n\n        let scTickets: any[] = await getOwnedTickets(props.contract, props.account);\n        let processedScTickets : any[] = [];\n        for(let a = 0; a<scTickets.length; a++) {\n            let key : any;\n            let ticketObj: any = new Object();\n            for (key in scTickets[a]) {\n            ticketObj[key.toString()] = scTickets[a][key];\n            }\n            processedScTickets.push(ticketObj);\n        }\n\n        for(let i = 0; i< processedScTickets.length; i++) {\n            // const ticket = Object.fromEntries(scTickets[i])\n            const ticket:any = processedScTickets[i];\n            const urlPieces = ticket.metadataURI.split(\"/\");\n            const uriPt1 = urlPieces[urlPieces.length -1];\n            const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n            const ticketRawMetadata = await axios.post(finalUrl);\n            const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n            processedScTickets[i] = Object.assign(processedScTickets[i], {metadata: ticketMetadata});\n        }\n        setMyTickets(processedScTickets)\n\n    }\n\n    return (<div>\n        <h2 style={{marginBottom:\"50px\"}}>My Tickets</h2>\n        {/*<Button onClick={loadTickets}>Load Tickets</Button>*/}\n        {loading && <NFTicketSpinner message=\"Loading ticket collection...\" spinnerSize=\"100\"></NFTicketSpinner>}\n\n\n        {myTickets != null && myTickets.map((ticket:any, idx: number) => {\n            console.log(\"Ticket is: \", ticket);\n                return <TicketDisplay  key={idx} ticket={ticket} account={props.account} contract={props.contract}/>\n            })}\n    </div>)\n}\n\n\nexport default MyTickets;","import React, {useEffect, useState} from \"react\";\nimport {getMaticPrice, getRevenue, withdrawFunds} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst MyFunds = (props: any) => {\n\n    const [funds, setFunds] = useState<number>(0);\n    const [maticPrice, setMaticPrice] = useState<number>(0);\n    const [withdrawSuccessful, setWithdrawSuccessful] = useState<boolean>(false);\n    const [withdrawError, setWithdrawError] = useState<boolean>(false);\n\n    const [withdrawing, setWithdrawing] = useState<boolean>(false);\n\n\n    const _getRevenue = () => {\n        getRevenue(props.contract, props.account)\n            .then(r=>{\n                setFunds(Math.round(r*10**-18*100)/100);\n                console.log(\"Revenue: \", r)});\n    }\n\n    useEffect(()=> {\n        getMaticPrice(props.contract)\n            .then(r=> {\n                setMaticPrice(Math.round(r*10**-8*100)/100);\n            })\n\n        _getRevenue();\n    },[])\n\n    const _withdrawFunds = () => {\n        setWithdrawing(true);\n        withdrawFunds(props.contract, props.account)\n            .then(()=>{\n                setWithdrawing(false);\n                setWithdrawSuccessful(true);\n                _getRevenue();\n                setTimeout(()=>{\n                    setWithdrawSuccessful(false);\n                },4000)\n\n            })\n            .catch(()=>{\n                setWithdrawing(false);\n                setWithdrawError(true);\n                setTimeout(()=>{\n                    setWithdrawError(false);\n                },4000)\n            })\n    }\n\n    return (<div>\n        <h1>My Funds</h1>\n        <div style={{marginTop:\"20px\"}}>\n            <span style={{fontSize:\"1.2em\"}}>Current funds: {Math.round(funds*maticPrice*100)/100} $ ({funds}) MATIC</span>\n        </div>\n        <div style={{marginTop:\"10px\"}}>\n            { !withdrawing && !(withdrawError || withdrawSuccessful) &&<Button disabled={funds===0} style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={_withdrawFunds}>Withdraw funds</Button>}\n            {withdrawError && <span style={{color:ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while withdrawing your funds</span>}\n            {withdrawSuccessful && <span style={{color:ColorPalette.success, fontSize:\"1.3em\"}}>Funds successfully withdrawn! </span>}\n            {withdrawing && <NFTicketSpinner message=\"Getting your NFTickets ready!\"/>}\n        </div>\n    </div>)\n\n}\n\n\nexport default MyFunds;","import React, {useEffect, useState} from \"react\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport {Col, Row} from \"react-bootstrap\";\nimport MyFunds from \"./MyFunds\";\n\n\nfunction Home(props: any) {\n\n\n    return (\n            <div  className=\"container-fluid\">\n                <Row>\n                    <Col>\n                <h1>Welcome to NFTickets</h1>\n                <h3>A platform for NFT based ticket emission and marketplace</h3>\n                        <div style={{marginTop:\"5%\"}}>\n                            <span>Start emitting your event tickets today!</span>\n                            <ul>\n\n                    <li>Connect to Mumbai Testnet</li>\n                    <li>Mint your own tickets</li>\n                    <li>Buy Tickets for your favorite events!</li>\n                </ul>\n                        </div>\n                    </Col>\n                    <Col>\n                        {props.contract &&\n                        <MyFunds account={props.account} network={props.network} contract={props.contract}/>\n                        }\n                    </Col>\n                </Row>\n            </div>\n    );\n}\n\nexport default Home;\n","import React, {useRef, useEffect, useState} from 'react'\nimport {BASE_IMAGE_URL, uploadToIPFS} from '../modules/ipfs_utils';\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {getInterval, getkeeperVerificationCounter, getUpdatesCounter, mintNFTicket} from \"../modules/nfticket_utils\";\n// @ts-ignore\nimport DatePicker from \"react-datepicker\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { SpinnerDiamond, SpinnerInfinity, SpinnerDotted } from 'spinners-react';\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst TicketCanvas = (props:any) => {\n\n    console.log(\"Received props: \", props);\n    const [badgerUrl,setBadgerUrl] = useState<any>(null);\n    const [uploadedBadgeUrl, setUploadedBadgeUrl] = useState<any>(null);\n    const [currentBadgeFile, setCurrentBadgeFile] = useState<any>(null);\n    const [badger, setBadger] = useState<any>(null)\n    const canvasRef = useRef(null)\n    const imageRef = useRef(null)\n    const badgeRef = useRef(null)\n\n    //Form states\n    const [eventMetadata, setEventMetadata] = useState<any>({});\n    const [eventData, setEventData] = useState<any>({});\n    const [expirationDateTimestamp, setExpirationDateTimestamp] = useState(new Date());\n    const [minting, setMinting] = useState<boolean>(false);\n\n    const [mintingError, setMintingError] = useState<boolean>(false);\n    const [mintingSuccessful, setMintingSuccessful] = useState<boolean>(false);\n\n\n\n    const styles = {\n        border: '2px solid rgba(0, 0, 0, 0.5)',\n        borderRadius:'10px',\n        padding:'20px',\n        marginBottom:'50px'\n    };\n\n    const drawTicket = (canvas: any, image:any, badge: any) => {\n\n        const ctx = canvas.getContext('2d')\n        ctx.canvas.width = image.width\n        ctx.canvas.height = image.height\n        ctx.drawImage(image,0,0);\n        if (badge !== null) {\n            ctx.drawImage(badge, image.width/4 - badge.width/2, image.height/3-badge.height/2, 200, 200)\n            printMetadata(canvas, image);\n        }\n    }\n\n\n    const printMetadata = (canvas: any, image:any) => {\n        const ctx = canvas.getContext('2d')\n        const startX = image.width/10;\n        const startY = image.height-(image.height/6);\n        const increment = 40;\n        ctx.font = \"22pt Calibri\";\n        ctx.fillText(`Event name: ${eventMetadata.eventName?eventMetadata.eventName:'-'}`, startX, startY )\n        ctx.fillText(`Unit price: ${eventData.unitPrice?eventData.unitPrice+' $':'-'}`, startX, startY + 1*increment)\n        ctx.fillText(`Max supply: ${eventData.maxSupply?eventData.maxSupply:'-'}`, startX, startY + 2*increment)\n        ctx.fillText(`Percentage on resale: ${eventData.percentageOnResale?eventData.percentageOnResale:'-'}`, startX, startY + 3*increment)\n\n\n    }\n\n\n    const onImageChange = async (event:any) => {\n        console.log(\"Image changed!\");\n        if (event.target.files && event.target.files[0]) {\n            let file = event.target.files[0];\n            const local_url = URL.createObjectURL(file);\n            console.log(local_url)\n            // Set badger file\n            setCurrentBadgeFile(file);\n            // Set local url for\n            setUploadedBadgeUrl(local_url);\n            setBadger(badgeRef.current);\n        }\n    };\n\n    const saveTicket = async () => {\n        const url = await uploadToIPFS(currentBadgeFile);\n        setBadgerUrl(url);\n        setBadger(badgeRef.current);\n        // Save on smart contract\n\n    }\n\n\n    const updateImage = () => {\n        const canvas : any = canvasRef.current\n        const image : any = imageRef.current\n        console.log(\"Will draw with badger: \", badger);\n        drawTicket(canvas, image, badger);\n    }\n\n    const changeEventNameHandler = (event:any) => {\n        setEventMetadata(Object.assign(eventMetadata,{\"eventName\": event.target.value}));\n        console.log(\"Metadata now is: \", eventMetadata);\n        updateImage()\n    }\n\n    const changeEventUnitPriceHandler = (event:any) => {\n        setEventData(Object.assign(eventData,{\"unitPrice\": event.target.value}));\n        console.log(\"Metadata now is: \", eventData);\n        updateImage()\n    }\n\n    const changeEventMaxSupplyHandler = (event:any) => {\n        setEventData(Object.assign(eventData,{\"maxSupply\": event.target.value}));\n        console.log(\"Metadata now is: \", eventData);\n        updateImage()\n    }\n\n    const changeEventResalePercHandler = (event: any) => {\n        setEventData(Object.assign(eventData,{\"percentageOnResale\": event.target.value}));\n        updateImage()\n    }\n\n    useEffect(() => {\n        console.log(\"Running use effect\")\n        const canvas : any = canvasRef.current\n        const image : any = imageRef.current\n        // const badge : any = badgeRef.current\n        drawTicket(canvas, image, badger);\n    }, [])\n\n    const _mintNFTicket = () => {\n        setMinting(true);\n        mintNFTicket(props.contract, props.account, eventData, eventMetadata, expirationDateTimestamp,currentBadgeFile)\n            .then(()=> {\n                setMinting(false);\n                setMintingSuccessful(true);\n                setTimeout(()=>{\n                    setMintingSuccessful(false);\n\n                }, 4000)\n            })\n            .catch(()=>{\n                setMinting(false);\n                setMintingError(true);\n                setTimeout(()=>{\n                    setMintingError(false);\n                }, 4000)\n            })\n\n    }\n\n\n\n    return (\n        <Container fluid className=\"justify-content-md-center\" style={styles}>\n            <h3>Ticket Editor</h3>\n            <Row>\n                <Col>\n                    <canvas className=\"align-self-center\" ref={canvasRef} {...props}/>\n                    <img ref={imageRef} src={BASE_IMAGE_URL} hidden={true} />\n                    <img ref={badgeRef} src={uploadedBadgeUrl} hidden={true} />\n                </Col>\n\n                <Col>\n                    <Row>\n                        <h4>Ticket badge</h4>\n                        <label className=\"mx-3\">Choose file: </label>\n                        <input type=\"file\" name=\"myImage\" onChange={onImageChange} />\n                    </Row>\n                    <Form className=\"mt-3\">\n                        <h4>Ticket metadata</h4>\n                        <Form.Group className=\"mb-3\" controlId=\"formEventName\">\n                            <Form.Label>Event name</Form.Label>\n                            <Form.Control type=\"event_name\" placeholder=\"Enter event name\" value={eventMetadata.eventName} onChange={changeEventNameHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formUnitPrice\">\n                            <Form.Label>Unit Price</Form.Label>\n                            <Form.Control type=\"unit_price\" placeholder=\"Uni price in dollars\"  value={eventMetadata.unitPrice} onChange={changeEventUnitPriceHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formMaxSupply\">\n                            <Form.Label>Maximum supply</Form.Label>\n                            <Form.Control type=\"max_supply\" placeholder=\"Maximum ticket supply\" value={eventMetadata.maxSupply} onChange={changeEventMaxSupplyHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formMaxSupply\">\n                            <Form.Label>Percentage on resale</Form.Label>\n                            <Form.Control type=\"perc_resale\" placeholder=\"Percentage on resale\" value={eventMetadata.percentageOnResale} onChange={changeEventResalePercHandler}/>\n                        </Form.Group>\n\n                        <DatePicker selected={expirationDateTimestamp} onChange={(date: any) => setExpirationDateTimestamp(date)} />\n                    </Form>\n                    <Row className=\"mt-3\">\n                        {!minting && !(mintingError || mintingSuccessful) && <Button style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={_mintNFTicket}>Mint tickets</Button>}\n\n                        {mintingError && <span style={{color: ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while minting your tickets</span>}\n                        {mintingSuccessful && <span style={{color: ColorPalette.success , fontSize:\"1.3em\"}}>NFTickets successfully minted! </span>}\n\n                        {minting && <NFTicketSpinner message=\"Minting your NFTickets...\"/>}\n\n\n                    </Row>\n                </Col>\n                </Row>\n            {/*<div>*/}\n            {/*    <Button onClick={()=> getInterval(props.contract)}>Interval</Button>*/}\n            {/*    <Button onClick={()=> getUpdatesCounter(props.contract)}>Updates counter</Button>*/}\n            {/*    <Button onClick={()=> getkeeperVerificationCounter(props.contract)}>Keeper verifications</Button>*/}\n            {/*</div>*/}\n        </Container>)\n}\n\n\nexport default TicketCanvas;","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport {BASE_EXPIRED_IMAGE_URL, BASE_IMAGE_URL, IPFS_BASE_URL} from \"../modules/ipfs_utils\";\nimport {balanceOf, getInterval} from \"../modules/nfticket_utils\";\nimport { useNavigate } from 'react-router-dom';\nimport {ColorPalette} from \"../styles/color_palette\";\n\n\nexport default function EventDisplay(props: any) {\n\n    const [availableForSale, setAvailableForSale] = useState<any>(0);\n\n    const navigate = useNavigate();\n\n    const getAvailableForSale = async () => {\n        const _availableForSable = await balanceOf(props.contract, props.ticket.owner, props.ticket.ticketId);\n        setAvailableForSale(_availableForSable)\n    }\n\n    useEffect(()=> {\n        const _availableForSable = getAvailableForSale().then(()=>{})\n        console.log(\"Balance is: \", availableForSale);\n    },[])\n\n    const routeChange=()=> {\n        let path = `../buy-ticket/${props.ticket.ticketId}`;\n        navigate(path);\n    }\n\n    const infoStyle = {\n        fontSize:\"1.2em\",\n\n    }\n\n    return (<div className=\"mt-2\"style={{border: '2px solid rgba(0, 0, 0, 0.5)', margin:\"20px\",\n        borderRadius:'10px', backgroundColor: ColorPalette.mainColor, width:\"80%\"}}>\n        <div style={{padding:\"10px\"}}>\n            <Row>\n                <Col>\n                    <div style={{marginLeft:\"10%\"}}>\n                    <h2>{props.ticket.metadata.eventName}</h2>\n                    <img  src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"200\" height=\"200\"/>\n                    {props.ticket.expired?<h3>Not for sale</h3>:null}\n                    </div>\n                </Col>\n                <Col>\n\n                    <p style={infoStyle}>Tickets for sale: {availableForSale}</p>\n                    <p style={infoStyle}>Price: {props.ticket.tokenSalePrice} $</p>\n                    <p style={infoStyle}>Event date: {props.ticket.expirationDateTimestamp}</p>\n                    <p style={infoStyle}>Maximum supply: {props.ticket.maxSupply}</p>\n                    <p style={infoStyle}><span>State: </span>{props.ticket.expired?<span>Expired</span>:<span>Valid</span>}</p>\n                    {!props.ticket.expired && props.ticket.owner.toUpperCase()!=props.account.toUpperCase()?<Button style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={routeChange}>Buy Tickets</Button>:null}\n\n\n\n                    {/*<img  style={{marginLeft:\"-370px\", marginTop:\"-170px\",zIndex:-1}} src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"80\" height=\"80\"/>*/}\n                </Col>\n\n            </Row>\n        </div>\n    </div>)\n\n}","import React, {useEffect, useState} from \"react\";\nimport {getAllEvents, getOwnedTickets} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport EventDisplay from \"./EventDisplay\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\n\nconst Events = (props: any) => {\n\n    const [events, setEvents] = useState<any>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    useEffect(()=> {\n        setLoading(true);\n        loadEvents()\n            .then((data)=> {\n                setLoading(false);\n\n                console.log(\"Got tickets: \", data);\n            })\n    },[])\n\n\n    const processIpfsString = (str: string) => {\n        const str1 = str.split(\"{\")[1];\n        const str2 = str1.split(\"}\")[0]\n        const finalStirng = \"{\" + str2 + \"}\";\n        console.log(\"Final string is: \", str2);\n        return finalStirng;\n    }\n\n\n    const loadEvents = async() => {\n        console.log(\"Loading Tickets...\");\n\n        let scTickets: any[] = await getAllEvents(props.contract, props.account);\n        let processedScTickets : any[] = [];\n        for(let a = 0; a<scTickets.length; a++) {\n            let key : any;\n            let ticketObj: any = new Object();\n            for (key in scTickets[a]) {\n                ticketObj[key.toString()] = scTickets[a][key];\n            }\n            processedScTickets.push(ticketObj);\n        }\n\n        for(let i = 0; i< processedScTickets.length; i++) {\n            // const ticket = Object.fromEntries(scTickets[i])\n            const ticket:any = processedScTickets[i];\n            const urlPieces = ticket.metadataURI.split(\"/\");\n            const uriPt1 = urlPieces[urlPieces.length -1];\n            const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n            const ticketRawMetadata = await axios.post(finalUrl);\n            const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n            processedScTickets[i] = Object.assign(processedScTickets[i], {metadata: ticketMetadata});\n        }\n        setEvents(processedScTickets)\n    }\n\n    return (<div>\n        <h2>Events</h2>\n    {/*<Button onClick={loadEvents}>Load Tickets</Button>*/}\n        {loading && <NFTicketSpinner message=\"Loading existing events...\" spinnerSize=\"100\"></NFTicketSpinner>}\n    {events != null && events.map((ticket:any, idx: number) => {\n        console.log(\"Ticket is: \", ticket);\n        return <EventDisplay  key={idx} ticket={ticket} account={props.account} contract={props.contract}/>\n\n    })}\n    </div>)\n}\n\n\nexport default Events;","import React, {useEffect, useState} from \"react\";\nimport {getOwnedTickets, getTicket, buyTickets, getMaticPrice} from \"../modules/nfticket_utils\";\n\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport {useParams} from \"react-router-dom\";\nimport {processSmartContractResponseTuple} from \"../modules/web3_utils\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\n\nconst BuyTickets = (props: any) => {\n\n    const {ticketId} = useParams();\n    const [ticketCounter, setTicketCounter] = useState<number>(0);\n    const [maticPrice, setMaticPrice] = useState<any>(null);\n    const [buying, setBuying] = useState<boolean>(false);\n    const [buyingError, setBuyingError] = useState<boolean>(false);\n    const [buyingSuccess, setBuyingSuccess] = useState<boolean>(false);\n\n    console.log(\"Is is : \", ticketId);\n    console.log(\"Props: \", props);\n\n    const [ticket, setTicket] = useState<any>(null);\n\n    useEffect(()=> {\n        getMaticPrice(props.contract)\n            .then(r=> {\n                const _maticRealPrice = r*10**-8;\n                setMaticPrice(_maticRealPrice);\n                console.log(\"Received matic price: \", maticPrice);\n            })\n\n        loadTicket()\n            .then((data)=> {\n                console.log(\"Got ticket: \", ticket);\n            })\n    },[])\n\n\n    const processIpfsString = (str: string) => {\n        const str1 = str.split(\"{\")[1];\n        const str2 = str1.split(\"}\")[0]\n        const finalStirng = \"{\" + str2 + \"}\";\n        console.log(\"Final string is: \", str2);\n        return finalStirng;\n    }\n\n    const _buyTickets = () => {\n        const valueToSend = ticketCounter*ticket.tokenSalePrice / maticPrice;\n        const valueInWei = valueToSend*10**18;\n        console.log(\"Value in wei is: \", valueInWei);\n        setBuying(true);\n        buyTickets(props.contract,ticketId,ticketCounter, props.account,Math.ceil(valueInWei))\n            .then(()=>{\n                setBuying(false);\n                setBuyingSuccess(true);\n                setTimeout(()=> {\n                    setBuyingSuccess(false);\n                },4000)\n                console.log(\"Tickets successfully transfered!!\")\n            })\n            .catch(()=>{\n                setBuying(false);\n                setBuyingError(true);\n                setTimeout(()=> {\n                    setBuyingError(false);\n                },4000)\n                console.log(\"Error buying tickets\");\n            })\n\n    }\n\n\n    const loadTicket = async() => {\n        console.log(\"Loading Ticket...\");\n\n        let scTicket: any = await getTicket(props.contract,ticketId);\n        const urlPieces = scTicket.metadataURI.split(\"/\");\n        const uriPt1 = urlPieces[urlPieces.length -1];\n        const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n        const ticketRawMetadata = await axios.post(finalUrl);\n        const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n        scTicket = Object.assign(scTicket, {metadata: ticketMetadata});\n        setTicket(scTicket)\n    }\n\n    return (<div>\n        <h2>Buy Tickets</h2>\n        {ticket!= null && <div><TicketDisplay ticket={ticket} account={props.account} contract={props.contract}></TicketDisplay>\n        <div>\n            <h3>Order: {ticketCounter} ({ticket.metadata.eventName}) tickets</h3>\n            <h3>Amount to pay: {ticketCounter*ticket.tokenSalePrice} $</h3>\n            <h4>Value in MATIC: ~{Math.round((ticketCounter*ticket.tokenSalePrice/maticPrice)*100)/100} @ {maticPrice} USD/MATIC</h4>\n        </div>\n            {!buying && !(buyingError || buyingSuccess) &&<div style={{width:\"50%\"}}>\n            <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, width:\"10%\", marginRight:\"20px\"}} onClick={()=>{ticketCounter==0?setTicketCounter(ticketCounter):setTicketCounter(ticketCounter-1)}}>-</Button>\n              <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor,  width:\"20%\",  marginRight:\"20px\"}} onClick={_buyTickets}>Buy</Button>\n            <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, width:\"10%\"}} onClick={()=>{setTicketCounter(ticketCounter+1)}}>+</Button>\n        </div>}\n\n            {buyingError && <span style={{color:ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while with the purchase transaction</span>}\n            {buyingSuccess && <span style={{color:ColorPalette.success, fontSize:\"1.3em\"}}>NFTickets successfully purchased! </span>}\n\n            {buying && <NFTicketSpinner message=\"Getting your NFTickets ready!\"/>}\n\n        </div> }\n    </div>)\n}\n\n\nexport default BuyTickets;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport NFTicketsNavbar from \"./components/Navbar\";\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport MyTickets from \"./components/MyTickets\";\nimport Home from \"./components/Home\";\nimport TicketCanvas from \"./components/TicketCanvas\";\nimport Events from \"./components/Events\";\nimport BuyTickets from \"./components/BuyTickets\";\nimport * as NFTicketContract from \"./artifacts/contracts/NFTickets.json\";\nimport {MUMBAI_CONTRACT_ADDRESS} from \"./modules/web3_utils\";\nimport MyFunds from \"./components/MyFunds\";\n\n\nfunction App() {\n\n    const [web3, setWeb3] = useState<any>(null)\n    const [network, setNetwork] = useState<any>(null)\n    const [account, setAccount] = useState<any>(null)\n    const [contract, setContract] = useState<any>(null);\n    const [isNetworkInvalid, setIsNetworkInvalid] = useState<boolean>(false);\n\n    const web3States = [web3, account, network];\n    const maskUpdateFunctions = [setWeb3, setAccount, setNetwork];\n\n\n\n    useEffect(()=> {\n        console.log(\"Network is: \", network);\n        if(network!=80001) {\n            setIsNetworkInvalid(true);\n        } else {\n            setIsNetworkInvalid(false);\n            const abi = (NFTicketContract as any).default.abi;\n            const contractAddress = MUMBAI_CONTRACT_ADDRESS\n            const contract: any = new web3.eth.Contract(abi, contractAddress)\n            setContract(contract);\n        }\n    }, [network, account])\n\n\n  return (\n    <div  className=\"container-fluid\">\n        <BrowserRouter>\n            <div style={{marginBottom:\"20px\"}}>\n            <NFTicketsNavbar maskUpdateFunctions={maskUpdateFunctions} web3States={web3States}/>\n            </div>\n                {/*{network && <div><p>Connected to {network}</p><p>Your address is: {account}</p></div>}*/}\n            {/*{contract && <p>Connected to contract</p>}*/}\n            {(isNetworkInvalid && account!=null) && <h3 style={{color:\"red\"}}>Please connect to Polygon's Mumbai Testnet</h3>}\n            <Routes>\n                <Route  path=\"/\" element={<Home account={account} network={network} contract={contract}/>} />\n\n                <Route path=\"mint-tickets\" element={<TicketCanvas account={account} network={network} contract={contract}\n                                                                    uri=\"https://ipfs.io/ipfs/QmYEowFCRGFsuzhhwMdijZ1sqUfZd28gcJ7bx3Vydgso9x\"/>} />\n                <Route path=\"/events\" element={<Events account={account} network={network} contract={contract}/>}/>\n                <Route path=\"my-tickets\" element={<MyTickets account={account} network={network} contract={contract}/>} />\n                {/*<Route path=\"my-funds\" element={<MyFunds account={account} network={network} contract={contract}/>} />*/}\n\n                <Route path=\"/buy-ticket/:ticketId\" element={<BuyTickets account={account} network={network} contract={contract}/>} />\n            </Routes>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n// https://ipfs.infura.io:5001/QmZw2UvYKRUt2cwHMuF5bW5Ku1PUqKHduF2sMAJ7ns6C4u\n\n    //","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport {ColorPalette} from \"./styles/color_palette\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <div>\n    <App />\n      </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}